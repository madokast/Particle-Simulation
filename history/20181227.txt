D:\Desktop\粒子仿真\particleSimulation\src\zrx\FormatPrint.java
----------------------------------------------------------------------
package zrx;

public class FormatPrint {
    public static String StringsIntoPanel(String...strArr)
    {
        int Maxlength=0;
        for(String str:strArr)
        {
            if(Maxlength<str.length())
                Maxlength=str.length();
        }
        Maxlength+=8;

        StringBuilder panelWidth = new StringBuilder();
        for(int i=0;i<Maxlength;i++) { panelWidth.append("*"); }
        panelWidth.append("**\n");//the left and right * and newline

        StringBuilder panelString = new StringBuilder();
        panelString.append(panelWidth);
        for(int i=0;i<strArr.length;i++)
        {
            StringBuilder line = new StringBuilder();
            line.append("*    ");
            line.append(strArr[i]);
            line.append("\n");

            panelString.append(line);
        }
        panelString.append(panelWidth);

        return panelString.toString();
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\button\RunButton.java
----------------------------------------------------------------------
package zrx.gui.button;

import java.awt.*;

public class RunButton extends Button {
    private static RunButton runButton;
    public static RunButton getInstance()
    {
        if(runButton==null)
            runButton = new RunButton();

        return runButton;
    }

    private RunButton()
    {
        super("Simulate");
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\button\SetParticleButton.java
----------------------------------------------------------------------
package zrx.gui.button;

import zrx.gui.Plot.PlotPhaseSpace;
import zrx.gui.setParticle.ParticleBeamSetDialog;

import java.awt.*;

public class SetParticleButton extends Button {
    private static SetParticleButton setParticleButton;
    public static SetParticleButton getInstance()
    {
        if(setParticleButton==null)
            setParticleButton = new SetParticleButton();

        return setParticleButton;
    }

    private SetParticleButton()
    {
        super("SetParticle");
        this.addActionListener(e->{
            PlotInCoordinateAxis.getInstance().repaint();
            SetParticleDialog.getInstance().setVisible(true);
        });
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\ButtonsOnTop.java
----------------------------------------------------------------------
package zrx.gui;

import zrx.gui.importMagnet.ImportMagnetButton;
import zrx.gui.button.RunButton;
import zrx.gui.setParticle.SetParticleButton;
import zrx.gui.informationWindow.InformationviVsibleButton;

import javax.swing.*;
import java.awt.*;

public class ButtonsOnTop extends Panel {
    private static ButtonsOnTop buttonsOnTop;
    public static ButtonsOnTop getInstance()
    {
        if(buttonsOnTop==null)
            buttonsOnTop = new ButtonsOnTop();

        return buttonsOnTop;
    }

    private Panel leftPanel = new Panel();
    private Panel rightPanel = new Panel();
    {
        leftPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        rightPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
    }

    private ButtonsOnTop()
    {
        leftPanel.add(ImportMagnetButton.getInstance());
        leftPanel.add(SetParticleButton.getInstance());
        leftPanel.add(RunButton.getInstance());

        rightPanel.add(InformationviVsibleButton.getInstance());

        //prefect 2018-12-26-20:15
        this.setLayout(new BoxLayout(this,BoxLayout.X_AXIS));
        this.add(leftPanel);
        this.add(rightPanel);
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\canvasAndGraphics\PlotInCoordinateAxis.java
----------------------------------------------------------------------
package zrx.gui.Plot;

import zrx.simulate.tool.SpecialNumber;

import java.awt.*;
import java.awt.image.BufferedImage;

public class PlotInCoordinateAxis extends Canvas{
    private static PlotInCoordinateAxis plotInCoordinateAxis;
    public static PlotInCoordinateAxis getInstance()
    {
        if(plotInCoordinateAxis ==null)
            plotInCoordinateAxis =new PlotInCoordinateAxis();

        return plotInCoordinateAxis;
    }
    private final int MainBufferedImageWidth = 600;
    private final int MainBufferedImageHight = 600;
    private final int AxisWidth = 50;
    private final int AxisOut = 5;
    private final int Margin = 30;
    private final int LineWidth = 2;
    private final int BackMargin = 20;

    private final int ArrowLength = 18;
    private final int ArrowWidth = 12;
    private final int MarkLength = 5;

    private Color whiteColor = new Color(0xFFFFFF);
    private Color blackColor = new Color(0x000000);
    private Color redColor = new Color(0xFF0000);

    private BufferedImage mainBufferedImage = new BufferedImage(MainBufferedImageWidth, MainBufferedImageHight,BufferedImage.TYPE_INT_RGB);
    private BufferedImage coreBufferedImage = new BufferedImage(MainBufferedImageWidth -2*Margin,
            MainBufferedImageHight -2*Margin,BufferedImage.TYPE_INT_RGB);
    private BufferedImage yAxisBufferedImage = new BufferedImage(AxisWidth, MainBufferedImageHight,BufferedImage.TYPE_INT_RGB);
    private BufferedImage xAxisBufferedImage = new BufferedImage(MainBufferedImageWidth,AxisWidth,BufferedImage.TYPE_INT_RGB);
    private BufferedImage xyAxisLeftDownCornerBufferedImage = new BufferedImage(AxisWidth,AxisWidth,BufferedImage.TYPE_INT_RGB);
    private BufferedImage togetherBufferedImage = new BufferedImage(MainBufferedImageWidth +AxisWidth,
            MainBufferedImageHight + AxisWidth,BufferedImage.TYPE_INT_RGB);
    private BufferedImage backgroundImage = new BufferedImage(togetherBufferedImage.getWidth()+2*BackMargin,
            togetherBufferedImage.getHeight()+2*BackMargin, BufferedImage.TYPE_INT_RGB);

    private Graphics mainGraphics = mainBufferedImage.getGraphics();
    private Graphics coreGraphics = coreBufferedImage.getGraphics();
    private Graphics yAxisGraphics = yAxisBufferedImage.getGraphics();
    private Graphics xAxisGraphics = xAxisBufferedImage.getGraphics();
    private Graphics xyAxisLeftDownCornerGraphics = xyAxisLeftDownCornerBufferedImage.getGraphics();
    private Graphics togetherGraphics = togetherBufferedImage.getGraphics();
    private Graphics backgroundGraphics = backgroundImage.getGraphics();

    @Override
    public void paint(Graphics g) {

        clean();
        drawAxis(123,-57,200,30);

        coreGraphics.setColor(redColor);
        coreGraphics.setFont(new Font(null,Font.PLAIN,15));
        coreGraphics.drawString("Test string",100,50);

        togetherGraphics.drawImage(yAxisBufferedImage,0,0,null);
        togetherGraphics.drawImage(xAxisBufferedImage,AxisWidth, MainBufferedImageHight,null);
        togetherGraphics.drawImage(xyAxisLeftDownCornerBufferedImage,0, MainBufferedImageHight,null);
        togetherGraphics.drawImage(coreBufferedImage,AxisWidth+Margin,Margin, null);
        backgroundGraphics.drawImage(togetherBufferedImage,BackMargin,BackMargin,null);
        g.drawImage(backgroundImage,0,0,null);
    }


    private PlotInCoordinateAxis()
    {
        super();
        this.setBounds(0,0,backgroundImage.getWidth(),backgroundImage.getHeight());
    }

    private void drawAxis()
    {
        yAxisGraphics.setColor(blackColor);
        yAxisGraphics.fillRect(AxisWidth- LineWidth -AxisOut,0, LineWidth, MainBufferedImageHight);

        int[][] arrowUp = {{AxisWidth-LineWidth/2-AxisOut,AxisWidth-LineWidth/2-AxisOut-ArrowWidth/2,
                AxisWidth-LineWidth/2-AxisOut+ArrowWidth/2}, {0,ArrowLength,ArrowLength}};
        yAxisGraphics.fillPolygon(new Polygon(arrowUp[0],arrowUp[1],3));

        xAxisGraphics.setColor(blackColor);
        xAxisGraphics.fillRect(0,AxisOut, MainBufferedImageWidth, LineWidth);

        int[][] arrowRight = {{MainBufferedImageWidth,MainBufferedImageWidth-ArrowLength,MainBufferedImageWidth-ArrowLength},
                {AxisOut+LineWidth/2,AxisOut+LineWidth/2+ArrowWidth/2,AxisOut+LineWidth/2-ArrowWidth/2}};
        xAxisGraphics.fillPolygon(new Polygon(arrowRight[0],arrowRight[1],3));

        xyAxisLeftDownCornerGraphics.setColor(blackColor);
        xyAxisLeftDownCornerGraphics.fillRect(AxisWidth- LineWidth -AxisOut,0,LineWidth,AxisWidth);
        xyAxisLeftDownCornerGraphics.fillRect(0,AxisOut,AxisWidth,LineWidth);
    }

    private void drawAxis(double xMAX, double xMIN, double yMAX, double yMIN)
    {
        drawAxis();

        double xMAXbigger = SpecialNumber.integerNumberBigger(xMAX);
        double yMAXbigger = SpecialNumber.integerNumberBigger(yMAX);
        double xMINsmaller = SpecialNumber.integerNumberSmaller(xMIN);
        double yMINsmaller = SpecialNumber.integerNumberSmaller(yMIN);

        int yDowm=Margin;
        int yUp=MainBufferedImageHight-Margin;

        int xLeft=Margin;
        int xRight=MainBufferedImageWidth-Margin;

        yAxisGraphics.setColor(blackColor);
        yAxisGraphics.fillRect(AxisWidth-AxisOut,MainBufferedImageHight-yDowm,MarkLength,LineWidth);
        yAxisGraphics.drawString(String.valueOf(yMINsmaller),0,MainBufferedImageHight-yDowm+5);//word down 5

        yAxisGraphics.fillRect(AxisWidth-AxisOut,MainBufferedImageHight-yUp,MarkLength,LineWidth);
        yAxisGraphics.drawString(String.valueOf(yMAXbigger),0,MainBufferedImageHight-yUp+5);

        xAxisGraphics.setColor(blackColor);
        xAxisGraphics.fillRect(xLeft,AxisOut-MarkLength,LineWidth,MarkLength);
        xAxisGraphics.drawString(String.valueOf(xMINsmaller),xLeft-20,AxisOut+18);

        xAxisGraphics.fillRect(xRight,AxisOut-MarkLength,LineWidth,MarkLength);
        xAxisGraphics.drawString(String.valueOf(xMAXbigger),xRight-20,AxisOut+18);
    }

    private void clean()
    {
        coreGraphics.setColor(whiteColor);
        coreGraphics.fillRect(0,0,coreBufferedImage.getWidth(),coreBufferedImage.getHeight());
        xAxisGraphics.setColor(whiteColor);
        xAxisGraphics.fillRect(0,0,xAxisBufferedImage.getWidth(),xAxisBufferedImage.getHeight());
        yAxisGraphics.setColor(whiteColor);
        yAxisGraphics.fillRect(0,0,yAxisBufferedImage.getWidth(),yAxisBufferedImage.getHeight());
        xyAxisLeftDownCornerGraphics.setColor(whiteColor);
        xyAxisLeftDownCornerGraphics.fillRect(0,0,
                xyAxisLeftDownCornerBufferedImage.getWidth(),xyAxisLeftDownCornerBufferedImage.getHeight());
        togetherGraphics.setColor(whiteColor);
        togetherGraphics.fillRect(0,0,togetherBufferedImage.getWidth(),togetherBufferedImage.getHeight());
        backgroundGraphics.setColor(whiteColor);
        backgroundGraphics.fillRect(0,0,backgroundImage.getWidth(),backgroundImage.getHeight());
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\canvasAndGraphics\SetParticleDialog.java
----------------------------------------------------------------------
package zrx.gui.Plot;

import zrx.gui.MainWindow;
import zrx.gui.tool.GUItools;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class SetParticleDialog extends Dialog {
    private static SetParticleDialog setParticleDialog;
    public static SetParticleDialog getInstance()
    {
        if(setParticleDialog ==null)
            setParticleDialog =new SetParticleDialog();

        return setParticleDialog;
    }

    private Panel leftPanel = new Panel();
    private Button OKbutton = new Button("OK");
    private Button previewButton = new Button("Preview");

    private Checkbox singleParticleOnlyCheckbox = new Checkbox("Set referred particle",true);
    private Checkbox beamDistrCheckbox = new Checkbox("Set beam distribution type",false);

    private void setLeftPanel()
    {
        TextArea particleTextArea = new TextArea();
        TextArea beamDistrTypeTextArea = new TextArea();

        Choice particleChoice = new Choice();
        particleChoice.add("Particle...");
        particleChoice.add("Proton");
        particleChoice.addItemListener(e->{
            if(e.getItem().equals("Proton"))
            {
                particleTextArea.setText("");
                particleTextArea.append("test particleTextArea");
            }
        });

        Choice beamDistrTypeChoine = new Choice();
        beamDistrTypeChoine.add("distribution...");
        beamDistrTypeChoine.add("Gauss");
        beamDistrTypeChoine.addItemListener(e->{
            if(e.getItem().equals("Gauss"))
            {
                beamDistrTypeTextArea.setText("");
                beamDistrTypeTextArea.append("text beamDistrTypeTextArea");
            }
        });


        Panel singleParticlePanel = new Panel();
        singleParticlePanel.setLayout(new BoxLayout(singleParticlePanel,BoxLayout.X_AXIS));
        singleParticlePanel.add(new Label("Set referred particle: "));
        singleParticlePanel.add(particleChoice);


        Panel beamPanel = new Panel();
        beamPanel.setLayout(new BoxLayout(beamPanel,BoxLayout.X_AXIS));
        beamPanel.add(new Label("Set distribution type"));
        beamPanel.add(beamDistrTypeChoine);

        Panel buttonPanle = new Panel();
        buttonPanle.setLayout(new FlowLayout(FlowLayout.CENTER));
        buttonPanle.add(OKbutton);
        buttonPanle.add(previewButton);


        leftPanel.setLayout(new BoxLayout(leftPanel,BoxLayout.Y_AXIS));
        leftPanel.add(Box.createVerticalStrut(50));

        leftPanel.add(singleParticlePanel);
        leftPanel.add(particleTextArea);
        leftPanel.add(Box.createVerticalStrut(50));

        leftPanel.add(beamPanel);
        leftPanel.add(beamDistrTypeTextArea);
        leftPanel.add(Box.createVerticalStrut(50));

        leftPanel.add(singleParticleOnlyCheckbox);
        leftPanel.add(beamDistrCheckbox);
        leftPanel.add(buttonPanle);

    }

    private Panel mainPanel = new Panel();
    private void setMainPanle()
    {
        mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.X_AXIS));
        mainPanel.add(Box.createHorizontalStrut(20));
        setLeftPanel();
        mainPanel.add(leftPanel);
        mainPanel.add(Box.createHorizontalStrut(19));
        mainPanel.add(PlotInCoordinateAxis.getInstance());
        mainPanel.add(Box.createHorizontalStrut(18));
    }

    private SetParticleDialog()
    {
        super(MainWindow.getInstance(),"Set particle parameter",false);

        this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
        this.add(Box.createVerticalStrut(10));

        setMainPanle();
        this.add(mainPanel);
        this.add(Box.createVerticalStrut(10));

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                setVisible(false);
            }
        });

        this.pack();
        WindowIntoCenter.dialogCenter(this);
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\importMagnet\DataNotEmptyErrorDialog.java
----------------------------------------------------------------------
package zrx.gui.importMagnet;

import zrx.gui.MainWindow;
import zrx.gui.informationWindow.InformationTextArea;
import zrx.gui.tool.GUItools;
import zrx.simulate.basicDataContainer.ImportedMagnet;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;

public class DataNotEmptyErrorDialog extends Dialog {
    private static DataNotEmptyErrorDialog dataNotEmptyErrorDialog;
    public static DataNotEmptyErrorDialog getInstance()
    {
        if(dataNotEmptyErrorDialog ==null)
            dataNotEmptyErrorDialog = new DataNotEmptyErrorDialog();

        return dataNotEmptyErrorDialog;
    }

    private DataNotEmptyErrorDialog()
    {
        super(MainWindow.getInstance(),"Data nonempty",true);

        TextField textField = new TextField();
        textField.setText("Field Data is not empty.Do you want to delete the existing data?");
        textField.setEditable(false);

        Panel buttonsPanel = new Panel();
        buttonsPanel.setLayout(new BoxLayout(buttonsPanel,BoxLayout.X_AXIS));
        Button okbutton = new Button("OK");
        Button nobutton = new Button("NO");
        buttonsPanel.add(okbutton);
        buttonsPanel.add(nobutton);

        okbutton.addActionListener(oke->{
            InformationTextArea.getInstance().append("Delete existing data\n");
            ImportedMagnet.clear();
            ImportedMagnet.clear();
            this.setVisible(false);
            this.setVisible(false);
        });

        nobutton.addActionListener(noe->{
            this.setVisible(false);
        });

        this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));
        this.add(textField);
        this.add(buttonsPanel);

        this.pack();
        WindowIntoCenter.dialogCenter(this);
        this.setVisible(true);
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\importMagnet\ImportMagnetButton.java
----------------------------------------------------------------------
package zrx.gui.importMagnet;

import zrx.gui.MainWindow;
import zrx.simulate.ImportMagnet;
import zrx.simulate.basicDataContainer.ImportedMagnet;

import java.awt.*;
import java.io.File;

public class ImportMagnetButton extends Button {
    private static ImportMagnetButton importMagnetButton;
    public static ImportMagnetButton getInstance()
    {
        if(importMagnetButton ==null)
            importMagnetButton = new ImportMagnetButton();

        return importMagnetButton;
    }

    private FileDialog fileDialog;

    private ImportMagnetButton()
    {
        super("ImportMagnet");

        this.addActionListener(e->{
            if(!ImportedMagnet.isEmpty())
            {
                DataNotEmptyErrorDialog.getInstance().setVisible(true);
            }
            else
            {
                fileDialog = new FileDialog(MainWindow.getInstance(),"Open magnetic field data file",FileDialog.LOAD);
                fileDialog.setVisible(true);

                String filePath = fileDialog.getDirectory()+fileDialog.getFile();
                if(new File(filePath).exists())
                {
                    Runnable runnable = ()->
                            ImportMagnet.withDateFilePath(fileDialog.getDirectory()+fileDialog.getFile());

                    new Thread(runnable).start();
                }
            }

        });
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\informationWindow\InformationTextArea.java
----------------------------------------------------------------------
package zrx.gui.informationWindow;

import java.awt.*;

public class InformationTextArea extends TextArea {
    private static InformationTextArea informationTextArea;
    public static InformationTextArea getInstance()
    {
        if(informationTextArea==null)
            informationTextArea = new InformationTextArea();

        return informationTextArea;
    }

    private InformationTextArea()
    {
        super(25,75);
        this.setEditable(false);
        this.setFont(new Font(null,Font.PLAIN,18));
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\informationWindow\InformationviVsibleButton.java
----------------------------------------------------------------------
package zrx.gui.informationWindow;

import java.awt.*;

public class InformationviVsibleButton extends Button {
    private static InformationviVsibleButton informationviVsibleButton;
    public static InformationviVsibleButton getInstance()
    {
        if(informationviVsibleButton==null)
            informationviVsibleButton = new InformationviVsibleButton();

        return informationviVsibleButton;
    }

    private InformationviVsibleButton()
    {
        super("InfoVisible");

        this.addActionListener(e->{
            if(InformationWindow.getInstance().isVisible())
                InformationWindow.getInstance().setVisible(false);
            else
                InformationWindow.getInstance().setVisible(true);
        });
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\informationWindow\InformationWindow.java
----------------------------------------------------------------------
package zrx.gui.informationWindow;

import zrx.gui.MainWindow;
import zrx.gui.tool.GUItools;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class InformationWindow extends Dialog {
    private static InformationWindow informationWindow;
    public static InformationWindow getInstance()
    {
        if(informationWindow==null)
            informationWindow = new InformationWindow();

        return informationWindow;
    }

    private InformationWindow()
    {
        super(MainWindow.getInstance(),"Information",false);
        this.add(InformationTextArea.getInstance());
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                setVisible(false);
            }
        });
        this.pack();
        WindowIntoCenter.dialogCenter(this);

        this.setVisible(true);
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\MainWindow.java
----------------------------------------------------------------------
package zrx.gui;

import zrx.gui.menuBar.MyMenuBar;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class MainWindow extends Frame {
    //singleton
    private static MainWindow mainWindow;
    public static MainWindow getInstance()
    {
        if(mainWindow==null)
            mainWindow = new MainWindow();

        return mainWindow;
    }

    private MainWindow()
    {
        //title
        this.setTitle("Particle Simulation" + " V0.1");

        //MyMenuBar
        this.setMenuBar(MyMenuBar.getInstance());

        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        this.add(ButtonsOnTop.getInstance());

        //fullScreen
        fullScreen(this);
        //closing method
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        //visible
        this.setVisible(true);
    }

    private void fullScreen(Frame frame)
    {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        frame.setBounds(0,0,screenSize.width,screenSize.height);
    }


}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\menuBar\FileMenu.java
----------------------------------------------------------------------
package zrx.gui.menuBar;

import javax.xml.validation.TypeInfoProvider;
import java.awt.*;

public class FileMenu extends Menu {
    private static FileMenu fileMenu;
    public static FileMenu getInstance()
    {
        if(fileMenu==null)
            fileMenu = new FileMenu();

        return fileMenu;
    }

    //exitMenuItem
    private MenuItem exitMenuItem = new MenuItem("Exit");
    {
        exitMenuItem.addActionListener(e->{
            System.exit(0);
        });
    }

    //constructor
    private FileMenu()
    {
        super("File");
        this.add(exitMenuItem);
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\menuBar\MyMenuBar.java
----------------------------------------------------------------------
package zrx.gui.menuBar;

import java.awt.*;

public class MyMenuBar extends MenuBar {
    //singleton
    private static MyMenuBar myMenuBar;
    public static MyMenuBar getInstance()
    {
        if(myMenuBar==null)
            myMenuBar = new MyMenuBar();

        return myMenuBar;
    }

    private MyMenuBar()
    {
        this.add(FileMenu.getInstance());
    }


}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\gui\tool\WindowIntoCenter.java
----------------------------------------------------------------------
package zrx.gui.tool;

import java.awt.*;

public class WindowIntoCenter {
    public static void dialogCenter(Dialog dialog)
    {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        dialog.setBounds(screenSize.width/2-dialog.getWidth()/2,
                screenSize.height/2-dialog.getHeight()/2,
                dialog.getWidth(),dialog.getHeight());
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\MainProcess.java
----------------------------------------------------------------------
package zrx;

import zrx.gui.MainWindow;
import zrx.gui.informationWindow.InformationTextArea;
import zrx.gui.informationWindow.InformationWindow;
import zrx.simulate.tool.SpecialNumber;

public class MainProcess {
    public static void main(String[] args) {
        MainWindow.getInstance();
        try {
            Thread.currentThread().sleep(500);
        }
        catch (InterruptedException ie)
        {
            System.out.println("浼戞伅浠ヤ笅锛岀瓑InformationWindow");
        }
        InformationWindow.getInstance().setVisible(true);
        String welcome = FormatPrint.StringsIntoPanel(
                "娆㈣繋浣跨敤绮掑瓙浠跨湡绋嬪簭V0.1",
                "浣滆?咃細璧垫鼎鏅?"
        );
        InformationTextArea.getInstance().append(welcome);

    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\basicDataContainer\ImportedMagnet.java
----------------------------------------------------------------------
package zrx.simulate.basicDataContainer;

import zrx.simulate.basicDataStructure.*;


public class ImportedMagnet {
    public static PositionVector positionVectorMax;
    public static PositionVector positionVectorMin;
    public static TriNumberDouble gapTriNumber;
    public static TriNumberInteger pointTriNumber;
    public static MagneticVector[] dataArray;

    public static boolean isEmpty()
    {
        if(dataArray==null)
            return true;
        else
            return false;
    }

    public static void clear()
    {
        positionVectorMin=null;
        positionVectorMax=null;
        gapTriNumber=null;
        pointTriNumber =null;
        dataArray=null;
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\basicDataStructure\MagneticFieldValue.java
----------------------------------------------------------------------
package zrx.simulate.basicDataStructure;

public class MagneticFieldValue {
    public MagneticVector magneticVector;
    public PositionVector positionVector;

    public MagneticFieldValue(PositionVector positionVector,MagneticVector magneticVector) {
        this.magneticVector = magneticVector;
        this.positionVector = positionVector;
    }

    public void print()
    {
        System.out.println("MagneticFieldValue: ");
        magneticVector.print();
        positionVector.print();
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\basicDataStructure\MagneticVector.java
----------------------------------------------------------------------
package zrx.simulate.basicDataStructure;

public class MagneticVector extends TriNumberDouble {
    public MagneticVector(double x, double y, double z) {
        super(x, y, z);
    }

    @Override
    public void print() {
        System.out.print("MagneticVector: ");
        super.print();
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\basicDataStructure\PositionVector.java
----------------------------------------------------------------------
package zrx.simulate.basicDataStructure;

public class PositionVector extends TriNumberDouble {
    public PositionVector(double x, double y, double z) {
        super(x, y, z);
    }

    @Override
    public void print() {
        System.out.print("PositionVector: ");
        super.print();
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\basicDataStructure\TriNumberDouble.java
----------------------------------------------------------------------
package zrx.simulate.basicDataStructure;

public class TriNumberDouble {
    public double x;
    public double y;
    public double z;

    public TriNumberDouble(){}

    public TriNumberDouble(double x,double y,double z)
    {
        this.x=x;
        this.y=y;
        this.z=z;
    }

    public void print()
    {
        System.out.printf("%e\t%e\t%e\n",x,y,z);
    }

    @Override
    public int hashCode() {
        long lx = Double.doubleToLongBits(x);
        long ly = Double.doubleToLongBits(y);
        long lz = Double.doubleToLongBits(z);
        return (int)(lx^(lx>>>32))+(int)(ly^(ly>>>32))+(int)(lz^(lz>>>32));
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\basicDataStructure\TriNumberInteger.java
----------------------------------------------------------------------
package zrx.simulate.basicDataStructure;

public class TriNumberInteger {
    public int x;
    public int y;
    public int z;

    public TriNumberInteger(){}

    public TriNumberInteger(int x,int y,int z)
    {
        this.x=x;
        this.y=y;
        this.z=z;
    }

    public void print()
    {
        System.out.printf("%d\t%d\t%d\n",x,y,z);
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\basicDataStructure\VelocityVector.java
----------------------------------------------------------------------
package zrx.simulate.basicDataStructure;

public class VelocityVector extends TriNumberDouble {
    @Override
    public void print() {
        System.out.print("VelocityVector: ");
        super.print();
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\ImportMagnet.java
----------------------------------------------------------------------
package zrx.simulate;

import zrx.simulate.tool.FormatPrint;
import zrx.gui.informationWindow.InformationTextArea;
import zrx.simulate.basicDataContainer.ImportedMagnet;
import zrx.simulate.basicDataStructure.*;
import zrx.simulate.tool.SpecialNumber;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

public class ImportMagnet {
    public static void withDateFilePath(String filePath)
    {

        File dataFile = new File(filePath);
        //System.out.println("filePath = " + filePath);
        //System.out.println("dataFile.exists() = " + dataFile.exists());

        try(FileReader fileReader= new FileReader(dataFile);
        BufferedReader br = new BufferedReader(fileReader))
        {
            InformationTextArea.getInstance().append("Import magnetic field data from " + filePath + "\n");

            String str;
            String[] strArr;
            int allPointNumber;

            //read the first line. it contains the data of point number along 3 axes
            //in my data file the first line is [ 901 13 224 2]. it is z,y,x axis point number respectively.
            try {
                strArr=br.readLine().split("\\s+");
                ImportedMagnet.pointTriNumber = new TriNumberInteger(Integer.parseInt(strArr[3]),
                        Integer.parseInt(strArr[2]),Integer.parseInt(strArr[1]));
            }
            catch (Exception e)
            {
                e.printStackTrace();
                InformationTextArea.getInstance().append("File format error: can not import it\n");
                ImportedMagnet.clear();
            }

            //calculate the total point number just using x*y*z and allocate storage for magnetic field data
            allPointNumber = ImportedMagnet.pointTriNumber.x*ImportedMagnet.pointTriNumber.y*ImportedMagnet.pointTriNumber.z;
            ImportedMagnet.dataArray = new MagneticVector[allPointNumber];

            //discard 7 lines to magnetic field data
            for(int i=0;i<7;i++)
                br.readLine();

            //read magnetic field data
            int i=0;

            //for positionVectorMax, positionVectorMin and gapTriNumber
            PositionVector previousPosition = null;
            double xMAX=-SpecialNumber.MAXrealNonnegative,yMAX=-SpecialNumber.MAXrealNonnegative,zMAX=-SpecialNumber.MAXrealNonnegative,
                    xMIN=SpecialNumber.MAXrealNonnegative,yMIN=SpecialNumber.MAXrealNonnegative,zMIN=SpecialNumber.MAXrealNonnegative,
                    xGap=0,yGap=0,zGap=0;

            //using process bar, dividing into 20 section
            final int completionSection = 20;
            int completionInt = 0;//0~20
            double completionDouble = completionInt/(double)completionSection;//0~1 +=0.05
            StringBuilder stringBuilder = new StringBuilder();//for writing process bar
            {//start process bar
                stringBuilder.append("Progress bar: ");
                stringBuilder.append("[");
                for(int ii=0;ii<completionSection;ii++){stringBuilder.append("+");}
                stringBuilder.append("]");

                InformationTextArea.getInstance().append(stringBuilder.toString());
            }

            while((str=br.readLine())!=null)
            {
                //split line intn ["",x,y,z,bx,by,bz] 123xyz 456bxyz
                strArr=str.split("\\s+");

                //get the MAX
                if(xMAX<Double.parseDouble(strArr[1])) {xMAX=Double.parseDouble(strArr[1]);}
                if(yMAX<Double.parseDouble(strArr[2])) {yMAX=Double.parseDouble(strArr[2]);}
                if(zMAX<Double.parseDouble(strArr[3])) {zMAX=Double.parseDouble(strArr[3]);}

                //get the MIN
                if(xMIN>Double.parseDouble(strArr[1])) {xMIN=Double.parseDouble(strArr[1]);}
                if(yMIN>Double.parseDouble(strArr[2])) {yMIN=Double.parseDouble(strArr[2]);}
                if(zMIN>Double.parseDouble(strArr[3])) {zMIN=Double.parseDouble(strArr[3]);}

                //get the gap
                if(previousPosition==null) {
                    previousPosition=new PositionVector(Double.parseDouble(strArr[1]),
                            Double.parseDouble(strArr[2]),Double.parseDouble(strArr[3]));
                }
                else {
                    if(xGap<SpecialNumber.MINrealNonnegative) {xGap=Math.abs(previousPosition.x-Double.parseDouble(strArr[1]));}
                    if(yGap<SpecialNumber.MINrealNonnegative) {yGap=Math.abs(previousPosition.y-Double.parseDouble(strArr[2]));}
                    if(zGap<SpecialNumber.MINrealNonnegative) {zGap=Math.abs(previousPosition.z-Double.parseDouble(strArr[3]));}

                    previousPosition.x=Double.parseDouble(strArr[1]);
                    previousPosition.y=Double.parseDouble(strArr[2]);
                    previousPosition.z=Double.parseDouble(strArr[3]);
                }

                //import data
                ImportedMagnet.dataArray[i] = new MagneticVector(Double.parseDouble(strArr[4]),
                                Double.parseDouble(strArr[5]),Double.parseDouble(strArr[6]));


                //show process bar
                if(i==(int)(allPointNumber*completionDouble))
                {

                    int end = InformationTextArea.getInstance().getCaretPosition();
                    if(end==0)
                    {
                        InformationTextArea.getInstance().append("import failure\n");
                        return;
                    }

                    stringBuilder = new StringBuilder();
                    stringBuilder.append("[");
                    for(int ii=0;ii<completionInt;ii++){stringBuilder.append("=");}
                    for(int ii=0;ii<20-completionInt;ii++){stringBuilder.append("+");}
                    stringBuilder.append("]");

                    System.out.println("end = " + end);
                    System.out.println("stringBuilder.length() = " + stringBuilder.length());

                    InformationTextArea.getInstance().replaceRange(stringBuilder.toString(),end-stringBuilder.length(),end);

                    completionInt++;
                    completionDouble = completionInt/(double)completionSection;
                }

                i++;
            }

            {//finish Importing process bar
                int end = InformationTextArea.getInstance().getCaretPosition();
                stringBuilder = new StringBuilder();

                stringBuilder.append("[");
                for(int ii=0;ii<completionSection;ii++){stringBuilder.append("=");}
                stringBuilder.append("]");
                InformationTextArea.getInstance().replaceRange(stringBuilder.toString(),end-stringBuilder.length(),end);
                InformationTextArea.getInstance().append("\n");
            }

            ImportedMagnet.positionVectorMax = new PositionVector(xMAX/1000,yMAX/1000,zMAX/1000);
            ImportedMagnet.positionVectorMin = new PositionVector(xMIN/1000,yMIN/1000,zMIN/1000);
            ImportedMagnet.gapTriNumber = new TriNumberDouble(xGap/1000,yGap/1000,zGap/1000);

            String importedSuccessfullyInformation = FormatPrint.StringsIntoPanel(
                    "Import magnetic field data successfully",
                    "The total position number is "+allPointNumber,
                    "And the imported total position number is "+i,
                    "The point number along X is "+ImportedMagnet.pointTriNumber.x,
                    "The point number along Y is "+ImportedMagnet.pointTriNumber.y,
                    "The point number along Z is "+ImportedMagnet.pointTriNumber.z,
                    "The MAX position is x= "+ImportedMagnet.positionVectorMax.x+"m    y="+
                            ImportedMagnet.positionVectorMax.y+"m    z="+ImportedMagnet.positionVectorMax.z+"m",
                    "The MIN position is x="+ImportedMagnet.positionVectorMin.x+"m    y="+
                            ImportedMagnet.positionVectorMin.y+"m    z="+ImportedMagnet.positionVectorMin.z+"m",
                    "And the step length is x="+ImportedMagnet.gapTriNumber.x+"m    y=="+
                            ImportedMagnet.gapTriNumber.y+"m    y="+ImportedMagnet.gapTriNumber.z+"m"
            );
            InformationTextArea.getInstance().append(importedSuccessfullyInformation);


        }
        catch (Exception e) {e.printStackTrace();}
    }
}
----------------------------------------------------------------------



D:\Desktop\粒子仿真\particleSimulation\src\zrx\simulate\tool\SpecialNumber.java
----------------------------------------------------------------------
package zrx.simulate.tool;

public class SpecialNumber {
    public static final double MINrealNonnegative = 1.0e-10;
    public static final double MAXrealNonnegative = 1.0e+50;

    public static double integerNumberBigger(double x)
    {
        double t=1.0;
        double answer=0;

        if(x==0)
        {
            answer=1.0;
        }

        while(Math.abs(x)>10.0)
        {
            x/=10.0;
            t*=10.0;
        }

        while(Math.abs(x)<1.0)
        {
            x*=10.0;
            t/=10.0;
        }

        if(x>0)
        {
            int xINT = (int)(x+SpecialNumber.MINrealNonnegative)+1;
            answer=(double)xINT*t;
        }
        if(x<0)
        {
            int xINT = (int)(x+SpecialNumber.MINrealNonnegative);
            answer=(double)xINT*t;
        }

        return answer;

    }

    public static double integerNumberSmaller(double x)
    {
        double t=1.0;
        double answer=0;

        if(x==0)
        {
            answer=-1.0;
        }

        while(Math.abs(x)>10.0)
        {
            x/=10.0;
            t*=10.0;
        }

        while(Math.abs(x)<1.0)
        {
            x*=10.0;
            t/=10.0;
        }

        if(x>0)
        {
            int xINT = (int)(x+SpecialNumber.MINrealNonnegative);
            answer=(double)xINT*t;
        }
        if(x<0)
        {
            int xINT = (int)(x-SpecialNumber.MINrealNonnegative)-1;
            answer=(double)xINT*t;
        }

        return answer;
    }
}

/*
**integerNumberBigger and integerNumberSmaller
        {//test
            System.out.println(SpecialNumber.integerNumberBigger(-0.08));
            System.out.println(SpecialNumber.integerNumberBigger(-12.3));
            System.out.println(SpecialNumber.integerNumberBigger(45.85));
            System.out.println(SpecialNumber.integerNumberBigger(0.05));
            //-0.07
            //-10.0
            //50.0
            //0.06

            System.out.println(SpecialNumber.integerNumberSmaller(0.08));
            System.out.println(SpecialNumber.integerNumberSmaller(2250));
            System.out.println(SpecialNumber.integerNumberSmaller(450));
            System.out.println(SpecialNumber.integerNumberSmaller(-0.05));
            //0.08
            //2000.0
            //400.0
            //-0.06
        }
*/
----------------------------------------------------------------------
